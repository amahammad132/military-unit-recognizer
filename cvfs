#!/usr/bin/env python3
import argparse
from colorama import Fore, Style
import cv2
import numpy as np
from os import walk
from typing import List

IMAGE_DIR = './image'
ORIG_TEMPLATE_IMAGE = f"{IMAGE_DIR}/template.png"


# Turn a value from a range of [-1, 1] into a percentage string,
# with colors indicating a pass or fail
def range_to_percent_pretty(value: float) -> str:
    percentage_val = (50 * (value + 1))
    return "%s%.2f%%%s" % (
        (Fore.GREEN if percentage_val >= 50 else Fore.RED),
        percentage_val,
        Style.RESET_ALL
    )


# Check if a given image file name is similar to or different to the original
def check_img(matching_image_name: str, template) -> bool:
    matching_image_img = cv2.imread(matching_image_name, 0)

    print("\nChecking", matching_image_name)

    res = cv2.matchTemplate(template, matching_image_img, cv2.TM_CCOEFF_NORMED)

    # Get the first item matching the template (not accurate)
    corr_first = res[0][0]
    print("first item :", range_to_percent_pretty(corr_first))

    # Find the highest correlation points (more accurate)
    corr_max = np.amax(res)
    print("max        :", range_to_percent_pretty(corr_max))

    # Find the average of the correlation points (most accurate)
    corr_mean = np.mean(res)
    print("mean       :", range_to_percent_pretty(corr_mean))

    # If the correlation is above
    # correlation_threshold, then it has passed
    correlation_threshold = 0.5
    corr_pass = corr_max > correlation_threshold

    if corr_pass:
        print(Fore.GREEN + "PASS")
    else:
        print(Fore.RED + "FAIL")
    print(Style.RESET_ALL, end='')
    return corr_pass


def main(args):
    # If there are arguments, use them instead
    # of the original template image path
    template_img_pathname: str
    if args.template is None:
        template_img_pathname = ORIG_TEMPLATE_IMAGE
    else:
        template_img_pathname = args.template

    print("Template image:", template_img_pathname)

    # Opens the template image
    template_img = cv2.imread(
        template_img_pathname,
        0
    )

    image_list: List[str]
    if args.input is None:
        # Get a list of files in the image directory
        (_, _, image_list) = next(walk(IMAGE_DIR))
        image_list = [f"{IMAGE_DIR}/{item}" for item in image_list]
    else:
        image_list = [args.input]

    print("Scanning through", image_list)

    # Check the correlation of each image in the list
    for image in image_list:
        check_img(image, template_img)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='A program that finds the similarity'
                    ' of flags and returns a PASS or FAIL'
    )
    parser.add_argument(
        '--input', '-i',
        nargs='?',
        help='The file selected to compare with the template.',
        type=str
    )
    parser.add_argument(
        '--template', '-t',
        nargs='?',
        help='The file selected to be compared with.',
        type=str
    )

    main(parser.parse_args())
